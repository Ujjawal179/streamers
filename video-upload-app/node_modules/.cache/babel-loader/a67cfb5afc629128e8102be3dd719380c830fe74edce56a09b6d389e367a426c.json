{"ast":null,"code":"var _jsxFileName = \"/Users/shivanshchauhan/Desktop/Work/MicroSAAS/backend/video-upload-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css'; // You can add your custom styles here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoFile, setVideoFile] = useState(null);\n  const [message, setMessage] = useState('');\n  const [videoUrl, setVideoUrl] = useState('');\n  const handleFileChange = event => {\n    setVideoFile(event.target.files[0]);\n  };\n  const uploadVideo = async () => {\n    if (!videoFile) {\n      alert('Please select a video file first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', videoFile);\n    try {\n      // POST request to backend to handle Pinata upload\n      const response = await axios.post('http://localhost:3005/upload', formData);\n      const {\n        hash\n      } = response.data;\n      setMessage('Upload Successful! IPFS Hash: ' + hash);\n\n      // Fetch the video URL using the hash\n      fetchVideoUrl(hash);\n\n      // Post the IPFS hash to another API\n      await postHash(hash);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage('Error: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n    }\n  };\n  const fetchVideoUrl = async hash => {\n    try {\n      const response = await axios.get(`http://localhost:3005/video/${hash}`);\n      setVideoUrl(response.data.videoUrl);\n    } catch (error) {\n      setMessage(prev => {\n        var _error$response2, _error$response2$data;\n        return prev + '\\nError fetching video URL: ' + (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n      });\n    }\n  };\n  const postHash = async hash => {\n    try {\n      const response = await axios.post('http://localhost:3005/api/receive-hash', {\n        hash\n      });\n      if (response.status === 200) {\n        setMessage(prev => prev + '\\nHash posted to API successfully!');\n      } else {\n        throw new Error('Failed to send hash to API');\n      }\n    } catch (error) {\n      setMessage(prev => {\n        var _error$response3, _error$response3$data;\n        return prev + '\\nError posting hash to API: ' + (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Your Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadVideo,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), videoUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Video Preview:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        width: \"600\",\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoUrl,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"yrL2bowl6zO4leWt2a/lTuZUFYA=\");\n_c = App;\nexport default App;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './App.css'; // You can add your custom styles here\n\n// function App() {\n//     const [videoFile, setVideoFile] = useState(null);\n//     const [message, setMessage] = useState('');\n\n//     const handleFileChange = (event) => {\n//         setVideoFile(event.target.files[0]);\n//     };\n\n//     const uploadVideo = async () => {\n//         if (!videoFile) {\n//             alert('Please select a video file first.');\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append('file', videoFile);\n\n//         try {\n//             // POST request to backend to handle Pinata upload\n//             const response = await axios.post('http://localhost:3005/upload', formData);\n//             const { hash } = response.data;\n//             setMessage('Upload Successful! IPFS Hash: ' + hash);\n\n//             // Post the IPFS hash to another API\n//             await postHash(hash);\n//         } catch (error) {\n//             setMessage('Error: ' + (error.response?.data?.message || error.message));\n//         }\n//     };\n\n//     const postHash = async (hash) => {\n//         try {\n//             const response = await axios.post('http://localhost:3005/api/receive-hash', {\n//                 hash,\n//             });\n\n//             if (response.status === 200) {\n//                 setMessage(prev => prev + '\\nHash posted to API successfully!');\n//             } else {\n//                 throw new Error('Failed to send hash to API');\n//             }\n//         } catch (error) {\n//             setMessage(prev => prev + '\\nError posting hash to API: ' + (error.response?.data?.message || error.message));\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Upload Your Video</h1>\n//             <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n//             <button onClick={uploadVideo}>Upload</button>\n//             <p>{message}</p>\n//         </div>\n//     );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","videoFile","setVideoFile","message","setMessage","videoUrl","setVideoUrl","handleFileChange","event","target","files","uploadVideo","alert","formData","FormData","append","response","post","hash","data","fetchVideoUrl","postHash","error","_error$response","_error$response$data","get","prev","_error$response2","_error$response2$data","status","Error","_error$response3","_error$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","width","controls","src","_c","$RefreshReg$"],"sources":["/Users/shivanshchauhan/Desktop/Work/MicroSAAS/backend/video-upload-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css'; // You can add your custom styles here\n\nfunction App() {\n    const [videoFile, setVideoFile] = useState(null);\n    const [message, setMessage] = useState('');\n    const [videoUrl, setVideoUrl] = useState('');\n\n    const handleFileChange = (event) => {\n        setVideoFile(event.target.files[0]);\n    };\n\n    const uploadVideo = async () => {\n        if (!videoFile) {\n            alert('Please select a video file first.');\n            return;\n        }\n\n        const formData = new FormData();\n        formData.append('file', videoFile);\n\n        try {\n            // POST request to backend to handle Pinata upload\n            const response = await axios.post('http://localhost:3005/upload', formData);\n            const { hash } = response.data;\n            setMessage('Upload Successful! IPFS Hash: ' + hash);\n\n            // Fetch the video URL using the hash\n            fetchVideoUrl(hash);\n\n            // Post the IPFS hash to another API\n            await postHash(hash);\n        } catch (error) {\n            setMessage('Error: ' + (error.response?.data?.message || error.message));\n        }\n    };\n\n    const fetchVideoUrl = async (hash) => {\n        try {\n            const response = await axios.get(`http://localhost:3005/video/${hash}`);\n            setVideoUrl(response.data.videoUrl);\n        } catch (error) {\n            setMessage(prev => prev + '\\nError fetching video URL: ' + (error.response?.data?.message || error.message));\n        }\n    };\n\n    const postHash = async (hash) => {\n        try {\n            const response = await axios.post('http://localhost:3005/api/receive-hash', {\n                hash,\n            });\n\n            if (response.status === 200) {\n                setMessage(prev => prev + '\\nHash posted to API successfully!');\n            } else {\n                throw new Error('Failed to send hash to API');\n            }\n        } catch (error) {\n            setMessage(prev => prev + '\\nError posting hash to API: ' + (error.response?.data?.message || error.message));\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Upload Your Video</h1>\n            <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n            <button onClick={uploadVideo}>Upload</button>\n            <p>{message}</p>\n            {videoUrl && (\n                <div>\n                    <h2>Video Preview:</h2>\n                    <video width=\"600\" controls>\n                        <source src={videoUrl} type=\"video/mp4\" />\n                        Your browser does not support the video tag.\n                    </video>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './App.css'; // You can add your custom styles here\n\n// function App() {\n//     const [videoFile, setVideoFile] = useState(null);\n//     const [message, setMessage] = useState('');\n\n//     const handleFileChange = (event) => {\n//         setVideoFile(event.target.files[0]);\n//     };\n\n//     const uploadVideo = async () => {\n//         if (!videoFile) {\n//             alert('Please select a video file first.');\n//             return;\n//         }\n\n//         const formData = new FormData();\n//         formData.append('file', videoFile);\n\n//         try {\n//             // POST request to backend to handle Pinata upload\n//             const response = await axios.post('http://localhost:3005/upload', formData);\n//             const { hash } = response.data;\n//             setMessage('Upload Successful! IPFS Hash: ' + hash);\n\n//             // Post the IPFS hash to another API\n//             await postHash(hash);\n//         } catch (error) {\n//             setMessage('Error: ' + (error.response?.data?.message || error.message));\n//         }\n//     };\n\n//     const postHash = async (hash) => {\n//         try {\n//             const response = await axios.post('http://localhost:3005/api/receive-hash', {\n//                 hash,\n//             });\n\n//             if (response.status === 200) {\n//                 setMessage(prev => prev + '\\nHash posted to API successfully!');\n//             } else {\n//                 throw new Error('Failed to send hash to API');\n//             }\n//         } catch (error) {\n//             setMessage(prev => prev + '\\nError posting hash to API: ' + (error.response?.data?.message || error.message));\n//         }\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>Upload Your Video</h1>\n//             <input type=\"file\" accept=\"video/*\" onChange={handleFileChange} />\n//             <button onClick={uploadVideo}>Upload</button>\n//             <p>{message}</p>\n//         </div>\n//     );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}